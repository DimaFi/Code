def rotate_90(matrix):
    """Поворачивает матрицу на 90 градусов по часовой стрелке.
    Процесс: мы меняем строки на столбцы, начиная с последнего столбца и переходя к первому.
    Например:
    [
        ['.', '*'],
        ['*', '.']
    ]
    после поворота на 90 градусов она будет:
    [
        ['*', '.'],
        ['.', '*']
    ]
    """
    n = len(matrix)
    m = len(matrix[0])
    rotated = []
    
    # проходимся по столбцам начиная с последнего
    for j in range(m):
        rotated.append(''.join(matrix[n - 1 - i][j] for i in range(n)))
    
    return rotated

def can_match(mat1, mat2):
    """Проверяет, можно ли сдвигом матрицы mat1 совместить с матрицей mat2.
    Мы проверяем все возможные сдвиги матрицы mat1 относительно mat2,
    если хотя бы для одного сдвига они совпадают, то возвращаем True, иначе False.
    
    Сдвигаем матрицу по осям, начиная с возможных смещений: 
    от -n2+1 до n1 и от -m2+1 до m1.
    """
    n1, m1 = len(mat1), len(mat1[0])
    n2, m2 = len(mat2), len(mat2[0])
    
    # проверяем все сдвиги по строкам (отриц и полож смещения)
    for i_offset in range(-n2 + 1, n1):
        for j_offset in range(-m2 + 1, m1):
            match = True  # совпали ли матрицы?

            # пробуем выравнивать все элементы обеих матриц по текущим смещениям
            for i in range(n2):
                for j in range(m2):
                    ni = i + i_offset   # индекс строка в матрице mat1
                    nj = j + j_offset   # индекс столбец в матрице mat1
                    
                    # проверяем что индексы в Mat1
                    if 0 <= ni < n1 and 0 <= nj < m1:
                        if mat1[ni][nj] != mat2[i][j]: # не совпали
                            match = False
                            break
                if not match:  # хотя бы одна пара не совпала
                    break
            if match:
                return True
    
    return False

def check_matching_images(mat1, mat2):
    """Проверяет, можно ли сделать совпадение изображений с помощью поворотов и сдвигов.
    Мы проверяем все возможные повороты первого изображения (0°, 90°, 180°, 270°),
    и для каждого проверяем, можно ли сдвигом совместить с изображением mat2.
    
    Шаги:
    1. Создаем все повороты первого изображения.
    2. Для каждого поворота проверяем, можно ли сдвигом совместить с mat2.
    3. Если находим совпадение — выводим "YES", иначе "NO".
    """
    # Переменная rotations будет хранить все возможные повороты первого изображения
    rotations = [mat1]

    # Генерация всех 90°-поворотов (до 270°) для матрицы mat1
    for _ in range(3):
        rotations.append(rotate_90(rotations[-1]))  # Поворачиваем последний поворот на 90°

    # Проверяем все повороты и сдвиги
    for rotated in rotations:
        if can_match(rotated, mat2):  # Если для этого поворота и сдвига совпали изображения
            return "YES"  # Если нашли совпадение, возвращаем YES

    return "NO"

na, ma = map(int, input().split())  # 1
a = [input().strip() for _ in range(na)]

nb, mb = map(int, input().split())  # 2
b = [input().strip() for _ in range(nb)]

print(check_matching_images(a, b))
